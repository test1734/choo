import java.util.Scanner;

public class playfair{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int choice = sc.nextInt();
        sc.nextLine();

        String text = sc.nextLine().toUpperCase().replace('J', 'I').replaceAll("[^A-Z]", "");

        String key = sc.nextLine().toUpperCase().replace('J', 'I').replaceAll("[^A-Z]", "");

        char[][] matrix = createMatrix(key);

        String result = (choice == 1) ? encrypt(text, matrix) : decrypt(text, matrix);
        System.out.println("Result: " + result.toUpperCase());

        sc.close();
    }

    private static char[][] createMatrix(String key) {
        String alpha = "ABCDEFGHIKLMNOPQRSTUVWXYZ";
        StringBuilder sb = new StringBuilder();
        for (char c : (key + alpha).toCharArray())
            if (sb.indexOf(String.valueOf(c)) == -1) sb.append(c);

        char[][] mat = new char[5][5];
        for (int i = 0, k = 0; i < 5; i++)
            for (int j = 0; j < 5; j++)
                mat[i][j] = sb.charAt(k++);
        return mat;
    }

    private static String encrypt(String text, char[][] mat) {
        StringBuilder res = new StringBuilder();
        for (int i = 0; i < text.length(); i += 2) {
            char a = text.charAt(i);
            char b = (i + 1 < text.length()) ? text.charAt(i + 1) : 'X';
            if (a == b) b = 'X';
            int[] p1 = pos(a, mat), p2 = pos(b, mat);
            if (p1[0] == p2[0]) {
                res.append(mat[p1[0]][(p1[1] + 1) % 5]);
                res.append(mat[p2[0]][(p2[1] + 1) % 5]);
            } else if (p1[1] == p2[1]) {
                res.append(mat[(p1[0] + 1) % 5][p1[1]]);
                res.append(mat[(p2[0] + 1) % 5][p2[1]]);
            } else {
                res.append(mat[p1[0]][p2[1]]);
                res.append(mat[p2[0]][p1[1]]);
            }
        }
        return res.toString();
    }

    private static String decrypt(String text, char[][] mat) {
        StringBuilder res = new StringBuilder();
        for (int i = 0; i < text.length(); i += 2) {
            char a = text.charAt(i);
            char b = (i + 1 < text.length()) ? text.charAt(i + 1) : 'X';
            int[] p1 = pos(a, mat), p2 = pos(b, mat);
            if (p1[0] == p2[0]) {
                res.append(mat[p1[0]][(p1[1] + 4) % 5]);
                res.append(mat[p2[0]][(p2[1] + 4) % 5]);
            } else if (p1[1] == p2[1]) {
                res.append(mat[(p1[0] + 4) % 5][p1[1]]);
                res.append(mat[(p2[0] + 4) % 5][p2[1]]);
            } else {
                res.append(mat[p1[0]][p2[1]]);
                res.append(mat[p2[0]][p1[1]]);
            }
        }
        return res.toString();
    }

    private static int[] pos(char c, char[][] mat) {
        for (int i = 0; i < 5; i++)
            for (int j = 0; j < 5; j++)
                if (mat[i][j] == c) return new int[]{i, j};
        return null;
    }
}
