import java.util.*;

public class PlayfairCipher {

    private char[][] matrix = new char[5][5];

    // Generate the key matrix
    public void generateKeyMatrix(String key) {
        boolean[] used = new boolean[26];
        key = key.toUpperCase().replaceAll("[^A-Z]", "").replace("J", "I");
        StringBuilder keyBuilder = new StringBuilder();

        for (char c : key.toCharArray()) {
            if (!used[c - 'A']) {
                used[c - 'A'] = true;
                keyBuilder.append(c);
            }
        }

        for (char c = 'A'; c <= 'Z'; c++) {
            if (c == 'J') continue;
            if (!used[c - 'A']) {
                used[c - 'A'] = true;
                keyBuilder.append(c);
            }
        }

        for (int i = 0; i < 25; i++) {
            matrix[i / 5][i % 5] = keyBuilder.charAt(i);
        }
    }

    // Helper to find character position in the matrix
    private int[] findPosition(char c) {
        if (c == 'J') c = 'I';
        for (int i = 0; i < 5; i++)
            for (int j = 0; j < 5; j++)
                if (matrix[i][j] == c)
                    return new int[]{i, j};
        return null;
    }

    // Encrypt the message
    public String encrypt(String plaintext) {
        plaintext = prepareText(plaintext);

        StringBuilder encrypted = new StringBuilder();
        for (int i = 0; i < plaintext.length(); i += 2) {
            char a = plaintext.charAt(i);
            char b = plaintext.charAt(i + 1);
            int[] pos1 = findPosition(a);
            int[] pos2 = findPosition(b);

            if (pos1[0] == pos2[0]) {
                encrypted.append(matrix[pos1[0]][(pos1[1] + 1) % 5]);
                encrypted.append(matrix[pos2[0]][(pos2[1] + 1) % 5]);
            } else if (pos1[1] == pos2[1]) {
                encrypted.append(matrix[(pos1[0] + 1) % 5][pos1[1]]);
                encrypted.append(matrix[(pos2[0] + 1) % 5][pos2[1]]);
            } else {
                encrypted.append(matrix[pos1[0]][pos2[1]]);
                encrypted.append(matrix[pos2[0]][pos1[1]]);
            }
        }

        return encrypted.toString();
    }

    // Decrypt the message
    public String decrypt(String ciphertext) {
        ciphertext = ciphertext.toUpperCase().replaceAll("[^A-Z]", "").replace("J", "I");

        StringBuilder decrypted = new StringBuilder();
        for (int i = 0; i < ciphertext.length(); i += 2) {
            char a = ciphertext.charAt(i);
            char b = ciphertext.charAt(i + 1);
            int[] pos1 = findPosition(a);
            int[] pos2 = findPosition(b);

            if (pos1[0] == pos2[0]) {
                decrypted.append(matrix[pos1[0]][(pos1[1] + 4) % 5]);
                decrypted.append(matrix[pos2[0]][(pos2[1] + 4) % 5]);
            } else if (pos1[1] == pos2[1]) {
                decrypted.append(matrix[(pos1[0] + 4) % 5][pos1[1]]);
                decrypted.append(matrix[(pos2[0] + 4) % 5][pos2[1]]);
            } else {
                decrypted.append(matrix[pos1[0]][pos2[1]]);
                decrypted.append(matrix[pos2[0]][pos1[1]]);
            }
        }

        return decrypted.toString();
    }

    // Prepare plaintext for encryption: make digraphs, handle repeating letters
    private String prepareText(String text) {
        text = text.toUpperCase().replaceAll("[^A-Z]", "").replace("J", "I");

        StringBuilder prepared = new StringBuilder();
        for (int i = 0; i < text.length(); i++) {
            char first = text.charAt(i);
            char second = (i + 1 < text.length()) ? text.charAt(i + 1) : 'X';

            if (first == second) {
                prepared.append(first).append('X');
            } else {
                prepared.append(first).append(second);
                i++; // skip next
            }
        }

        if (prepared.length() % 2 != 0) {
            prepared.append('X'); // pad with 'X' if odd length
        }

        return prepared.toString();
    }

    public static void main(String[] args) {
        PlayfairCipher cipher = new PlayfairCipher();
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter key: ");
        String key = scanner.nextLine();

        System.out.print("Enter message: ");
        String input = scanner.nextLine();

        cipher.generateKeyMatrix(key);

        String encrypted = cipher.encrypt(input);
        System.out.println("Encrypted: " + encrypted);

        String decrypted = cipher.decrypt(encrypted);
        System.out.println("Decrypted: " + decrypted);

        scanner.close();
    }
}
