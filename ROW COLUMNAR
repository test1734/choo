import java.util.*;

public class RowColumnarCipher {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("1. Encryption\n2. Decryption");
        int choice = sc.nextInt(); sc.nextLine();
        System.out.print("Enter text: ");
        String text = sc.nextLine().toLowerCase();
        System.out.print("Enter key: ");
        String key = sc.nextLine().toLowerCase();
        
        if (choice == 1) {
            System.out.println("Ciphertext: " + encrypt(text, key));
        } else {
            System.out.println("Plaintext: " + decrypt(text, key));
        }
        
        sc.close();
    }

    static String encrypt(String text, String key) {
        int cols = key.length(), rows = (int) Math.ceil((double) text.length() / cols);
        char[][] grid = new char[rows][cols];
        int idx = 0;
        
        // Fill grid with text
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++) 
                grid[i][j] = (idx < text.length()) ? text.charAt(idx++) : 'x';
        
        // Get column order from key
        Integer[] order = getOrder(key);
        StringBuilder cipher = new StringBuilder();
        
        // Append columns based on the key order
        for (int col : order) {
            for (int i = 0; i < rows; i++) cipher.append(grid[i][col]);
        }
        return cipher.toString();
    }

    static String decrypt(String text, String key) {
        int cols = key.length(), rows = text.length() / cols;
        char[][] grid = new char[rows][cols];
        Integer[] order = getOrder(key);
        int idx = 0;

        // Fill grid column by column
        for (int col : order) {
            for (int i = 0; i < rows; i++) {
                grid[i][col] = text.charAt(idx++);
            }
        }

        // Read the grid row by row
        StringBuilder plain = new StringBuilder();
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) plain.append(grid[i][j]);
        }
        
        // Remove any trailing 'x' added during encryption
        return plain.toString().replaceAll("x+$", "");
    }

    static Integer[] getOrder(String key) {
        Integer[] order = new Integer[key.length()];
        for (int i = 0; i < key.length(); i++) order[i] = i;
        Arrays.sort(order, Comparator.comparingInt(i -> key.charAt(i)));
        return order;
    }
}

