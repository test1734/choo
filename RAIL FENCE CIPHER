import java.util.Scanner;

public class RailFenceCipher {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("1. Encryption\n2. Decryption");
        int choice = sc.nextInt();
        sc.nextLine(); // consume newline

        if (choice == 1) {
            System.out.print("Enter plaintext: ");
            String text = sc.nextLine();
            System.out.print("Enter key: ");
            int key = sc.nextInt();
            System.out.println("Ciphertext: " + encrypt(text, key));
        } else if (choice == 2) {
            System.out.print("Enter ciphertext: ");
            String text = sc.nextLine();
            System.out.print("Enter key: ");
            int key = sc.nextInt();
            System.out.println("Plaintext: " + decrypt(text, key));
        }
    }

    static String encrypt(String text, int key) {
        if (key == 1) return text;
        char[][] rail = new char[key][text.length()];
        for (int i = 0; i < key; i++) for (int j = 0; j < text.length(); j++) rail[i][j] = '\n';
        int row = 0, col = 0;
        boolean down = false;
        for (int i = 0; i < text.length(); i++) {
            rail[row][col++] = text.charAt(i);
            if (row == 0 || row == key - 1) down = !down;
            row += down ? 1 : -1;
        }
        StringBuilder cipher = new StringBuilder();
        for (int i = 0; i < key; i++) for (int j = 0; j < text.length(); j++) if (rail[i][j] != '\n') cipher.append(rail[i][j]);
        return cipher.toString();
    }

    static String decrypt(String text, int key) {
        if (key == 1) return text;
        char[][] rail = new char[key][text.length()];
        for (int i = 0; i < key; i++) for (int j = 0; j < text.length(); j++) rail[i][j] = '\n';
        int row = 0, col = 0;
        boolean down = false;
        for (int i = 0; i < text.length(); i++) {
            rail[row][col++] = '*';
            if (row == 0 || row == key - 1) down = !down;
            row += down ? 1 : -1;
        }
        int index = 0;
        for (int i = 0; i < key; i++) for (int j = 0; j < text.length(); j++) if (rail[i][j] == '*' && index < text.length()) rail[i][j] = text.charAt(index++);
        StringBuilder plain = new StringBuilder();
        row = 0; col = 0;
        for (int i = 0; i < text.length(); i++) {
            plain.append(rail[row][col++]);
            if (row == 0 || row == key - 1) down = !down;
            row += down ? 1 : -1;
        }
        return plain.toString();
    }
}

